import streamlit as st
import pandas as pd
import torch

# Yeni Google/Gemini RAG KÃ¼tÃ¼phaneleri
from langchain_google_genai import GoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from langchain_community.document_loaders import DataFrameLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain.chains import RetrievalQA

# Sabit TanÄ±mlamalar
FILE_PATH = "sirince_otelleri.csv"
LLM_MODEL = "gemini-pro" # KullanÄ±lacak Gemini modeli

# ----------------------------------------------------
# 1. RAG KURULUM FONKSÄ°YONLARI (Cache ile sadece 1 kez Ã§alÄ±ÅŸÄ±r)
# ----------------------------------------------------

@st.cache_resource
def setup_rag_chroma():
    # API AnahtarÄ±nÄ± Streamlit Secrets'ten gÃ¼venli bir ÅŸekilde al
    if "GEMINI_API_KEY" not in st.secrets:
        st.error("Hata: GEMINI_API_KEY bulunamadÄ±. LÃ¼tfen Streamlit Secrets'e ekleyin.")
        return None
    
    # Google API anahtarÄ±, LangChain tarafÄ±ndan otomatik olarak kullanÄ±lacaktÄ±r.

    try:
        df = pd.read_csv(FILE_PATH)
    except FileNotFoundError:
        st.error(f"Hata: Veri dosyasÄ± bulunamadÄ±: {FILE_PATH}")
        return None

    # Veri Ä°ÅŸleme
    loader = DataFrameLoader(df, page_content_column="Yorum_Metni")
    data = loader.load()
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    docs = text_splitter.split_documents(data)

    # Embedding modelini tanÄ±mla (Gemini - YÃ¼ksek Kalite)
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

    # VektÃ¶r veritabanÄ±nÄ± oluÅŸtur
    vectorstore = Chroma.from_documents(docs, embeddings)
    
    return vectorstore

@st.cache_resource
def get_rag_chain(vectorstore):
    if vectorstore is None:
        return None
        
    # LLM (Gemini Pro)
    llm = GoogleGenerativeAI(model=LLM_MODEL)
    
    # RetrievalQA zinciri: En alakalÄ± 3 sonucu bul ve cevabÄ± Ã¼ret
    qa_chain = RetrievalQA.from_chain_type(
        llm, 
        chain_type="stuff", 
        retriever=vectorstore.as_retriever(search_kwargs={"k": 3})
    )
    return qa_chain


# ----------------------------------------------------
# STREAMLIT ANA UYGULAMA GÃ–VDESÄ° (SADECE RAG BOT)
# ----------------------------------------------------

st.set_page_config(layout="wide", page_title="Gemini RAG Chatbot | Otel YorumlarÄ±")
st.title("âœ¨ Gemini Destekli Otel YorumlarÄ± RAG Chatbot")
st.markdown("---")

# RAG kurulumunu yap
vector_db = setup_rag_chroma()
qa_chain = get_rag_chain(vector_db)

if qa_chain:
    st.subheader("Gemini Destekli AkÄ±llÄ± Sorgulama")
    st.info("Bu bot, otel yorumlarÄ±na dayanarak TÃ¼rkÃ§e cevaplar Ã¼retir.")

    user_query = st.text_input("Otel yorumlarÄ±na dayalÄ± bir soru sorun (Ã–rn: Hangi otelin kahvaltÄ±sÄ± Ã§ok Ã¶vÃ¼lmÃ¼ÅŸ?):")

    if user_query:
        with st.spinner("Gemini cevap Ã¼retiyor..."):
            # RAG zincirini Ã§alÄ±ÅŸtÄ±r
            response = qa_chain.run(user_query)
            st.success("ğŸ¤– Cevap:")
            st.markdown(response)

else:
    st.warning("RAG sistemi baÅŸlatÄ±lamadÄ±. LÃ¼tfen GEMINI_API_KEY'in doÄŸru olduÄŸundan ve CSV dosyasÄ±nÄ±n bulunduÄŸundan emin olun.")